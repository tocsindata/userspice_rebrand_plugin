<?php
declare(strict_types=1);

namespace Rebrand;

/**
 * ReBrand â€” HeadTagsPatcher
 * Location: usersc/plugins/rebrand/classes/HeadTagsPatcher.php
 *
 * Responsibilities:
 *  - Detect existing brand assets in users/images/rebrand/icons
 *  - Build a safe head_tags.php snippet from provided meta + detected assets
 *  - Backup current users/includes/head_tags.php and write new content atomically
 *
 * Notes:
 *  - Uses DB::getInstance() internally (no $db params)
 *  - Uses $abs_us_root/$us_url_root globals for FS/URLs
 *  - Throws \RuntimeException on failures (caller handles UX/redirect/flash)
 */
class HeadTagsPatcher
{
    /** Return absolute FS path to the icons directory. */
    protected function iconsDirFs(bool $ensure = false): string
    {
        /** @var string $abs_us_root */
        /** @var string $us_url_root */
        global $abs_us_root, $us_url_root;
        $dir = rtrim($abs_us_root.$us_url_root, '/').'/users/images/rebrand/icons';
        if ($ensure && !is_dir($dir)) {
            @mkdir($dir, 0755, true);
        }
        return $dir;
    }

    /** Return absolute FS path to users/includes/head_tags.php. */
    protected function headFilePath(bool $ensureDir = false): string
    {
        global $abs_us_root, $us_url_root;
        $path = rtrim($abs_us_root.$us_url_root, '/').'/users/includes/head_tags.php';
        if ($ensureDir) {
            @mkdir(\dirname($path), 0755, true);
        }
        return $path;
    }

    /** Return absolute FS path to asset version file. */
    protected function versionFilePath(bool $ensureDir = false): string
    {
        $dir = __DIR__.'/../storage/versions';
        if ($ensureDir && !is_dir($dir)) {
            @mkdir($dir, 0755, true);
        }
        return $dir.'/asset_version.json';
    }

    /** Read current asset version (defaults to 1). */
    public function getAssetVersion(): int
    {
        $vf = $this->versionFilePath(false);
        $v  = 1;
        if (is_file($vf)) {
            $raw = @file_get_contents($vf);
            $dec = json_decode($raw ?: '1', true);
            if (is_int($dec)) $v = $dec;
        }
        return max(1, (int)$v);
    }

    /** Detect which assets exist in icons dir. */
    public function detectAssets(): array
    {
        $dir = $this->iconsDirFs(true);
        return [
            'favicon_ico'   => is_file($dir.'/favicon.ico'),
            'fav16'         => is_file($dir.'/favicon-16x16.png'),
            'fav32'         => is_file($dir.'/favicon-32x32.png'),
            'apple_touch'   => is_file($dir.'/apple-touch-icon.png'),
            'android_192'   => is_file($dir.'/android-chrome-192x192.png'),
            'android_512'   => is_file($dir.'/android-chrome-512x512.png'),
            'maskable_512'  => is_file($dir.'/maskable-512x512.png'),
            'og_image'      => is_file($dir.'/og-image.png'),
            'safari_pinned' => is_file($dir.'/safari-pinned-tab.svg'),
            'manifest'      => is_file($dir.'/site.webmanifest'),
        ];
    }

    /** Build the head_tags.php content (string) from inputs + detected assets. */
    public function build(array $opts): string
    {
        // Inputs (already sanitized at caller; still normalize here)
        $desc    = $this->nl((string)($opts['meta_description'] ?? ''));
        $author  = trim((string)($opts['meta_author'] ?? ''));
        $robots  = trim((string)($opts['meta_robots'] ?? ''));
        $theme   = trim((string)($opts['theme_color'] ?? ''));
        $twCard  = trim((string)($opts['twitter_card'] ?? ''));
        $ogTitle = trim((string)($opts['og_title'] ?? ''));
        $ogSite  = trim((string)($opts['og_site_name'] ?? ''));
        $extra   = $this->sanitizeExtra((string)($opts['extra_head_html'] ?? ''));

        $have   = $this->detectAssets();
        $v      = $this->getAssetVersion();

        // Build lines; IMPORTANT: $us_url_root must be resolved at runtime in the generated file.
        $e = static fn($s) => htmlspecialchars($s, ENT_QUOTES, 'UTF-8');

        $lines = [];
        $lines[] = '<?php /* Auto-generated by ReBrand plugin. Edit via plugin UI. */ ?>';
        $lines[] = '<?php $asset_version = '.(int)$v.'; ?>';
        $lines[] = '';

        if ($desc !== '')   { $lines[] = '<meta name="description" content="'.$e($desc).'">'; }
        if ($author !== '') { $lines[] = '<meta name="author" content="'.$e($author).'">'; }
        if ($robots !== '') { $lines[] = '<meta name="robots" content="'.$e($robots).'">'; }
        if ($theme  !== '') { $lines[] = '<meta name="theme-color" content="'.$e($theme).'">'; }

        if ($have['fav32'])        { $lines[] = '<link rel="icon" type="image/png" sizes="32x32" href="<?=$us_url_root?>users/images/rebrand/icons/favicon-32x32.png?v=<?=$asset_version?>">'; }
        if ($have['fav16'])        { $lines[] = '<link rel="icon" type="image/png" sizes="16x16" href="<?=$us_url_root?>users/images/rebrand/icons/favicon-16x16.png?v=<?=$asset_version?>">'; }
        if ($have['favicon_ico'])  { $lines[] = '<link rel="icon" href="<?=$us_url_root?>users/images/rebrand/icons/favicon.ico?v=<?=$asset_version?>">'; }
        if ($have['apple_touch'])  { $lines[] = '<link rel="apple-touch-icon" href="<?=$us_url_root?>users/images/rebrand/icons/apple-touch-icon.png?v=<?=$asset_version?>">'; }
        if ($have['manifest'])     { $lines[] = '<link rel="manifest" href="<?=$us_url_root?>users/images/rebrand/icons/site.webmanifest?v=<?=$asset_version?>">'; }
        if ($have['safari_pinned']){ $lines[] = '<link rel="mask-icon" href="<?=$us_url_root?>users/images/rebrand/icons/safari-pinned-tab.svg?v=<?=$asset_version?>" color="#000000">'; }
        if ($have['android_192'])  { $lines[] = '<link rel="icon" type="image/png" sizes="192x192" href="<?=$us_url_root?>users/images/rebrand/icons/android-chrome-192x192.png?v=<?=$asset_version?>">'; }
        if ($have['android_512'])  { $lines[] = '<link rel="icon" type="image/png" sizes="512x512" href="<?=$us_url_root?>users/images/rebrand/icons/android-chrome-512x512.png?v=<?=$asset_version?>">'; }
        if ($have['maskable_512']) { $lines[] = '<link rel="icon" type="image/png" sizes="512x512" href="<?=$us_url_root?>users/images/rebrand/icons/maskable-512x512.png?v=<?=$asset_version?>">'; }

        if ($ogTitle !== '') { $lines[] = '<meta property="og:title" content="'.$e($ogTitle).'">'; }
        if ($ogSite  !== '') { $lines[] = '<meta property="og:site_name" content="'.$e($ogSite).'">'; }
        if ($desc    !== '') { $lines[] = '<meta property="og:description" content="'.$e($desc).'">'; }
        if ($have['og_image']) {
            $lines[] = '<meta property="og:image" content="<?=$us_url_root?>users/images/rebrand/icons/og-image.png?v=<?=$asset_version?>">';
        }
        if ($twCard !== '') {
            $lines[] = '<meta name="twitter:card" content="'.$e($twCard).'">';
        }

        if ($extra !== '') {
            $lines[] = $extra;
        }

        $content = implode("\n", $lines) . "\n";
        return $this->nl($content);
    }

    /**
     * Write head_tags.php atomically after backing up existing content.
     * Returns the written path.
     */
    public function write(string $content, string $note = 'head_tags.php patch'): string
    {
        $target = $this->headFilePath(true);

        // Backup if exists
        if (is_file($target)) {
            $this->backupFile($target, $note);
        }

        // Atomic write
        $tmp = $target.'.tmp';
        if (@file_put_contents($tmp, $content, LOCK_EX) === false) {
            @unlink($tmp);
            throw new \RuntimeException('Failed to write temporary head_tags.php');
        }
        if (!@rename($tmp, $target)) {
            @unlink($tmp);
            throw new \RuntimeException('Failed to finalize head_tags.php write');
        }
        @chmod($target, 0644);

        return $target;
    }

    /** Insert a row into us_rebrand_file_backups for the given file path. */
    protected function backupFile(string $path, string $note): void
    {
        if (!is_file($path)) return;
        $db  = \DB::getInstance();
        $now = date('Y-m-d H:i:s');
        $uid = (int)($GLOBALS['user']->data()->id ?? 0);
        $body = @file_get_contents($path);

        try {
            $db->insert('us_rebrand_file_backups', [
                'took_at'        => $now,
                'user_id'        => $uid,
                'file_path'      => $path,
                'content_backup' => $body,
                'notes'          => $note,
            ]);
        } catch (\Throwable $e) {
            // Non-fatal; caller continues but we expose as exception for visibility
            throw new \RuntimeException('Backup failed for head_tags.php: '.$e->getMessage(), 0, $e);
        }
    }

    /** Normalize newlines to LF. */
    protected function nl(string $s): string
    {
        return \preg_replace("/\r\n?/", "\n", $s);
    }

    /** Strip any <script> ... </script> blocks from extra head HTML. */
    protected function sanitizeExtra(string $html): string
    {
        if ($html === '') return '';
        // Remove <script> blocks entirely
        $clean = \preg_replace('#<\s*script\b[^>]*>.*?<\s*/\s*script>#is', '', $html);
        return $this->nl((string)$clean);
    }
}
